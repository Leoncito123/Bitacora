---
import "../styles/global.css";
---
<!doctype html>
<html lang="es" class="font-primary">
	<head>
		<meta charset="UTF-8" />
		<meta name="viewport" content="width=device-width" />
		<link rel="icon" type="image/svg+xml" href="/LRS.svg" />
		<meta name="generator" content={Astro.generator} />
		<title>Leonardo Rangel Segura</title>
	</head>
	<body>
		<!-- Partículas de fondo -->
		<div class="particles-bg" id="particles"></div>
		
		<!-- Indicador de progreso de scroll -->
		<div class="scroll-indicator" id="scrollIndicator"></div>
		
		<slot />
		
		<script>
			// Crear partículas de fondo
			function createParticles() {
				const particlesContainer = document.getElementById('particles');
				if (!particlesContainer) return;
				
				for (let i = 0; i < 50; i++) {
					const particle = document.createElement('div');
					particle.className = 'particle';
					particle.style.left = Math.random() * 100 + '%';
					particle.style.top = Math.random() * 100 + '%';
					particle.style.animationDelay = Math.random() * 8 + 's';
					particle.style.animationDuration = (Math.random() * 8 + 8) + 's';
					particlesContainer.appendChild(particle);
				}
			}

			// Función para el indicador de progreso de scroll
			function updateScrollIndicator() {
				const scrollTop = window.pageYOffset || document.documentElement.scrollTop;
				const scrollHeight = document.documentElement.scrollHeight - document.documentElement.clientHeight;
				const scrollProgress = (scrollTop / scrollHeight) * 100;
				
				const indicator = document.getElementById('scrollIndicator');
				if (indicator) {
					indicator.style.transform = `scaleX(${scrollProgress / 100})`;
				}
			}

			// Intersection Observer para animaciones suaves
			function initializeScrollAnimations() {
				const observer = new IntersectionObserver((entries) => {
					entries.forEach((entry) => {
						if (entry.isIntersecting) {
							entry.target.classList.add('animate-slide-in');
							
							// Animar elementos hijos con delay escalonado
							const children = entry.target.querySelectorAll('.element-animate');
							children.forEach((child, index) => {
								setTimeout(() => {
									child.classList.add('animate-in');
								}, index * 150);
							});
						}
					});
				}, {
					threshold: 0.15,
					rootMargin: '-50px'
				});

				// Observar todas las tarjetas de slide
				const slideCards = document.querySelectorAll('.slide-card');
				slideCards.forEach((card) => observer.observe(card));
			}

			// Función para scroll suave personalizado
			function smoothScrollToSection(targetId) {
				const targetElement = document.getElementById(targetId);
				if (targetElement) {
					targetElement.scrollIntoView({
						behavior: 'smooth',
						block: 'start'
					});
				}
			}

			// Event listeners
			window.addEventListener('scroll', updateScrollIndicator);
			
			// Inicializar cuando el DOM esté listo
			document.addEventListener('DOMContentLoaded', () => {
				createParticles();
				initializeScrollAnimations();
				updateScrollIndicator();
			});

			// Reinicializar si el contenido cambia dinámicamente
			window.addEventListener('load', () => {
				initializeScrollAnimations();
				updateScrollIndicator();
			});
		</script>
	</body>
</html>

